{{- /* OpenShift Route: include certs only when DEPLOYMENT_TYPE=on-prem AND termination=edge */ -}}
{{- $depType    := lower (default "on-prem" .Values.env.DEPLOYMENT_TYPE) -}}
{{- $isCloud    := eq $depType "cloud" -}}
{{- $nsRelease  := .Release.Namespace -}}
{{- $name       := required "route.name is required" .Values.PDroute.name -}}
{{- $svc        := required "route.serviceName is required" .Values.PDroute.serviceName -}}
{{- $tgtPort    := default "http" .Values.PDroute.targetPort -}}
{{- $weight     := default 100 .Values.PDroute.weight -}}
{{- $hostGen    := default "true" .Values.PDroute.annotations.hostGenerated -}}
{{- $secretName := default "wxa4z-agents-tls-secret" .Values.PDroute.tls.secretName -}}
{{- $termOnPrem := default "edge" .Values.PDroute.tls.termination -}}

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: {{ $name }}
  annotations:
    openshift.io/host.generated: "{{ $hostGen }}"
    haproxy.router.openshift.io/timeout: "1m"
spec:
  to:
    kind: Service
    name: {{ $svc }}
    weight: {{ $weight }}
  port:
    targetPort: {{ $tgtPort }}
  tls:
    # Cloud: always edge (no certs). On-prem: use value (default edge).
    termination: {{ if $isCloud }}edge{{ else }}{{ $termOnPrem }}{{ end }}
    {{- /* Only inject certs when on-prem AND termination=edge */ -}}
    {{- if and (not $isCloud) (eq (lower $termOnPrem) "edge") }}
    {{- $sec := lookup "v1" "Secret" $nsRelease $secretName -}}
    {{- with (and $sec (index $sec.data "tls.crt")) }}
    certificate: |-
      {{ . | b64dec | nindent 6 }}
    {{- end }}
    {{- with (and $sec (index $sec.data "tls.key")) }}
    key: |-
      {{ . | b64dec | nindent 6 }}
    {{- end }}
    {{- with (and $sec (index $sec.data "ca.crt")) }}
    caCertificate: |-
      {{ . | b64dec | nindent 6 }}
    {{- end }}
    {{- end }}
